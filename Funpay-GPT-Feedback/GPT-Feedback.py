import os
import re
from datetime import datetime
from dotenv import load_dotenv

from g4f.client import Client
from FunPayAPI import Account
from FunPayAPI.types import MessageTypes
from FunPayAPI.updater.runner import Runner
from FunPayAPI.updater.events import NewMessageEvent

MAX_ATTEMPTS = 10
MAX_CHARACTERS = 700
MIN_CHARACTERS = 50
ORDER_ID_REGEX = re.compile(r"#([A-Za-z0-9]+)")

load_dotenv()
FUNPAY_AUTH_TOKEN = os.getenv("FUNPAY_AUTH_TOKEN")
if not FUNPAY_AUTH_TOKEN:
    raise ValueError("‚ùå FUNPAY_AUTH_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

MIN_RATING = int(os.getenv("MIN_RATING", "1"))

client = Client()

PROMPT_TEMPLATE = """
–ü—Ä–∏–≤–µ—Ç! –¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–≥—Ä–æ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.
–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:
    - –û—Ü–µ–Ω–∫–∞: {rating} –∏–∑ 5
    - –û—Ç–∑—ã–≤: {text}

–°–æ—Å—Ç–∞–≤—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç:
- –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏.
- –ü–æ–∂–µ–ª–∞–π —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ.
- –°–¥–µ–ª–∞–π —à—É—Ç–∫—É –ø—Ä–æ –ø–æ–∫—É–ø–∫—É.
- –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å: —Å–ø–∞—Å–∏–±–æ –∑–∞ {rating} –∑–≤–µ–∑–¥ –∏ –æ—Ç–∑—ã–≤ –æ—Ç {date} {time}! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø–æ–∫—É–ø–∫–∞.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML, markdown –∏–ª–∏ –∫–æ–¥.
"""

def truncate(text: str, limit: int) -> str:
    return text if len(text) <= limit else text[:limit - 3].rstrip() + "..."

def build_prompt(order) -> str:
    rating = getattr(order.review, "stars", None) or "5"
    text = getattr(order.review, "text", None) or "–°–ø–∞—Å–∏–±–æ!"
    return PROMPT_TEMPLATE.format(
        rating=rating,
        text=text,
        date=datetime.now().strftime("%d.%m.%Y"),
        time=datetime.now().strftime("%H:%M:%S"),
    )

def generate_response(prompt: str) -> str:
    for attempt in range(1, MAX_ATTEMPTS + 1):
        try:
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}]
            )
            text = " ".join(response.choices[0].message.content.strip().splitlines())

            if len(text) < MIN_CHARACTERS:
                print(f"[!] –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
                continue
            if len(text) > MAX_CHARACTERS:
                text = truncate(text, MAX_CHARACTERS)

            return text
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

    return "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üòä"

def handle_feedback(event: NewMessageEvent, account: Account):
    if event.message.type not in (MessageTypes.NEW_FEEDBACK, MessageTypes.FEEDBACK_CHANGED):
        return

    order_id_match = ORDER_ID_REGEX.search(str(event.message))
    if not order_id_match:
        print("[!] –ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        return

    order_id = order_id_match.group(1)
    order = account.get_order(order_id)

    if not order or not order.review:
        print(f"[!] –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∑—ã–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return

    stars = getattr(order.review, "stars", 0) or 0
    try:
        stars_int = int(stars)
    except Exception:
        stars_int = 0

    if stars_int < MIN_RATING:
        if order.review.reply:
            try:
                account.delete_review(order.id)
                print(f"[+] –£–¥–∞–ª—ë–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ {stars_int}")
            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ #{order.id}: {e}")
        else:
            print(f"[=] –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ #{order.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ä–µ–π—Ç–∏–Ω–≥ {stars_int} < {MIN_RATING})")
        return

    prompt = build_prompt(order)
    reply_text = generate_response(prompt)
    try:
        account.send_review(order.id, text=reply_text, rating=stars_int)
        print(f"[+] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ –æ—Ç–∑—ã–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {stars_int}")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ #{order.id}: {e}")

def main():
    account = Account(golden_key=FUNPAY_AUTH_TOKEN)
    account.get()

    runner = Runner(account)
    print("ü§ñ GPT-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è...")

    for event in runner.listen(requests_delay=3.0):
        if isinstance(event, NewMessageEvent):
            handle_feedback(event, account)

if __name__ == "__main__":
    main()
